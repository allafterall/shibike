---
interface Props {
  text: string;
  href?: string;
  type?: "button" | "submit" | "reset";
  variant?: "primary" | "secondary" | "outline";
  size?: "sm" | "md" | "lg";
  fullWidth?: boolean;
  class?: string;
}

const {
  text,
  href,
  type = "button",
  variant = "primary",
  size = "md",
  fullWidth = false,
  class: className = "",
} = Astro.props;

const baseStyles =
  "inline-flex items-center justify-center font-medium rounded-sm transition-colors"; // Removed text-black

const variantStyles = {
  primary: "bg-primary hover:bg-primary/90 text-shiba-text-on-dark", // Assumes 'primary' in Tailwind is now shiba-red. text-shiba-text-on-dark is like shiba-cream.
  secondary: "bg-shiba-brown-dark hover:bg-shiba-brown-dark/90 text-shiba-text-on-dark",
  outline: "border border-shiba-brown-light text-shiba-brown-light hover:bg-primary/20 hover:text-primary", // Uses primary (shiba-red) for hover accent
};

const sizeStyles = {
  sm: "text-sm px-4 py-1.5",
  md: "text-base px-6 py-2",
  lg: "text-lg px-8 py-3",
};

const classes = [
  baseStyles,
  variantStyles[variant],
  sizeStyles[size],
  fullWidth ? "w-full" : "",
  className,
].join(" ");
---

{
  href ? (
    <a href={href} class={classes}>
      <slot name="before" />
      {text}
      <slot name="after" />
    </a>
  ) : (
    <button type={type} class={classes}>
      <slot name="before" />
      {text}
      <slot name="after" />
    </button>
  )
}
